        -:    0:Source:hash_test.c
        -:    0:Graph:hash_test.gcno
        -:    0:Data:hash_test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "CUnit/Basic.h"
        -:    2:#include "list_linked.h"
        -:    3:#include "hash_table.h"
        -:    4:
        -:    5:const elem_t ONE = {1};
        -:    6:const elem_t TWO = {2};
        -:    7:const elem_t THREE = {3};
        -:    8:const elem_t FIFTY = {50};
        -:    9:const elem_t SHEJ = {.c = "hej"};
        -:   10:const elem_t S10 = {.c = "10"};
        -:   11:const elem_t S333 = {.c = "333"};
        -:   12:
        -:   13:struct hash_table
        -:   14:{
        -:   15:  size_t no_buckets;
        -:   16:  entry_t *buckets;  
        -:   17:  size_t size;
        -:   18:  hash_func func; 
        -:   19:};
        -:   20:
       12:   21:int init_suite(void)
        -:   22:{
       12:   23:  return 0;
        -:   24:}
        -:   25:
       12:   26:int clean_suite(void)
        -:   27:{
       12:   28:  return 0;
        -:   29:}
        -:   30:
        -:   31://************ TODO: EGNA TESTFUNKTIONER
        -:   32:
        -:   33:
        1:   34:void test_lookup1()
        -:   35:{
        1:   36:  ioopm_hash_table_t *ht = ioopm_hash_table_create(key_extract_int);
       18:   37:  for (int i = 0; i < 17; ++i) /// 18 is a bit magical 
        -:   38:    {
       17:   39:      elem_t value = {i};
       17:   40:      CU_ASSERT_EQUAL(ioopm_hash_table_lookup(ht, value).value.c, NULL);
        -:   41:    }
        1:   42:  ioopm_hash_table_destroy(ht);
        1:   43:}
        -:   44:
        -:   45:
        -:   46:
        1:   47:void test_insert1()
        -:   48:{
        1:   49:  ioopm_hash_table_t *ht = ioopm_hash_table_create(key_extract_int);
        -:   50:  
        1:   51:  ioopm_hash_table_insert(ht, ONE, SHEJ);
        1:   52:  CU_ASSERT_STRING_EQUAL(ioopm_hash_table_lookup(ht, ONE).value.c, "hej");
        1:   53:  CU_ASSERT_EQUAL(ioopm_hash_table_lookup(ht, TWO).defined, false)
        1:   54:  ioopm_hash_table_insert(ht, TWO, S10);
        1:   55:  CU_ASSERT_STRING_EQUAL(ioopm_hash_table_lookup(ht, TWO).value.c, "10");
        1:   56:  ioopm_hash_table_insert(ht, TWO, SHEJ);
        1:   57:  CU_ASSERT_STRING_EQUAL(ioopm_hash_table_lookup(ht, TWO).value.c, "hej");
        -:   58:
        1:   59:  ioopm_hash_table_destroy(ht);
        1:   60:}
        -:   61:
        1:   62:void test_remove1()
        -:   63:{
        1:   64:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:   65:
        1:   66:  ioopm_hash_table_insert(ht, ONE, S10);
        -:   67:  
        1:   68:  elem_t str = ioopm_hash_table_remove(ht, ONE);
        -:   69:  
        1:   70:  CU_ASSERT_EQUAL(str.c, "10");
        -:   71:  
        1:   72:  CU_ASSERT_EQUAL(ioopm_hash_table_lookup(ht, ONE).defined, false);
        -:   73:  
        1:   74:  ioopm_hash_table_destroy(ht);
        1:   75:}
        -:   76:
        1:   77:void test_remove2()
        -:   78:{ 
        1:   79: ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:   80:
        1:   81:  CU_ASSERT_EQUAL(ioopm_hash_table_lookup(ht, ONE).defined, false);
        -:   82:
        1:   83:  elem_t str = ioopm_hash_table_remove(ht, ONE);
        -:   84:  
        1:   85:  CU_ASSERT_EQUAL(str.c, NULL);
        -:   86:  
        1:   87:  ioopm_hash_table_destroy(ht);
        1:   88:}
        -:   89:
        1:   90:void test_size1()
        -:   91:{
        1:   92:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:   93:
        1:   94:  CU_ASSERT_EQUAL(ioopm_hash_table_size(ht), 0);
        1:   95:  CU_ASSERT_TRUE(ioopm_hash_table_is_empty(ht));
        -:   96:  
        1:   97:  ioopm_hash_table_destroy(ht);
        1:   98:}
        -:   99:
        1:  100:void test_size2()
        -:  101:{
        1:  102:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  103:
        1:  104:  ioopm_hash_table_insert(ht, ONE, S10);
        1:  105:  CU_ASSERT_EQUAL(ioopm_hash_table_size(ht), 1);
        -:  106:  
        1:  107:  ioopm_hash_table_destroy(ht);
        1:  108:}
        -:  109:
        1:  110:void test_size3()
        -:  111:{
        1:  112:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  113:
        1:  114:  ioopm_hash_table_insert(ht, ONE, S10);
        1:  115:  ioopm_hash_table_remove(ht, ONE);
        1:  116:  CU_ASSERT_EQUAL(ioopm_hash_table_size(ht), 0);
        1:  117:  CU_ASSERT_TRUE(ioopm_hash_table_is_empty(ht));
        -:  118:  
        1:  119:  ioopm_hash_table_destroy(ht);
        1:  120:}
        -:  121:
        1:  122:void test_clear1()
        -:  123:{
        1:  124:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  125:
        1:  126:  ioopm_hash_table_insert(ht, ONE, S10);
        1:  127:  ioopm_hash_table_clear(ht);
        -:  128:  
        1:  129:  CU_ASSERT_EQUAL(ioopm_hash_table_size(ht), 0);
        1:  130:  CU_ASSERT_TRUE(ioopm_hash_table_is_empty(ht));
        -:  131:  
        1:  132:  ioopm_hash_table_destroy(ht);
        1:  133:}
        -:  134:
        1:  135:void test_clear2()
        -:  136:{
        1:  137:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  138:
        1:  139:  ioopm_hash_table_clear(ht);
        -:  140:  
        1:  141:  CU_ASSERT_EQUAL(ioopm_hash_table_size(ht), 0);
        1:  142:  CU_ASSERT_TRUE(ioopm_hash_table_is_empty(ht));
        -:  143:  
        1:  144:  ioopm_hash_table_destroy(ht);
        1:  145:}
        -:  146:
        1:  147:void test_clear3()
        -:  148:{
        1:  149:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  150:
        1:  151:  ioopm_hash_table_insert(ht, ONE, S10);
        1:  152:  ioopm_hash_table_remove(ht, ONE);
        -:  153:
        1:  154:  ioopm_hash_table_clear(ht);
        -:  155:  
        1:  156:  CU_ASSERT_EQUAL(ioopm_hash_table_size(ht), 0);
        1:  157:  CU_ASSERT_TRUE(ioopm_hash_table_is_empty(ht));
        -:  158:  
        1:  159:  ioopm_hash_table_destroy(ht);
        1:  160:}
        -:  161:
        1:  162:void test_getkeys1()
        -:  163:{
        -:  164:
        1:  165:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL); 
        -:  166:  
        1:  167:  ioopm_hash_table_insert(ht, THREE, S10);
        -:  168:  
        1:  169:  ioopm_list_t *keys = ioopm_hash_table_keys(ht);
        -:  170:
        -:  171:  
        1:  172:  CU_ASSERT_EQUAL(ioopm_linked_list_get(keys, 0).i, 3);
        -:  173:  
        1:  174:  ioopm_linked_list_destroy(keys);
        1:  175:  ioopm_hash_table_destroy(ht);
        -:  176:  
        1:  177:}
        -:  178:
        1:  179:void test_getkeys2()
        -:  180:{
        1:  181:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  182:
        1:  183:  ioopm_list_t *keys = ioopm_hash_table_keys(ht);
        -:  184:
        -:  185:   
        1:  186:  CU_ASSERT_EQUAL(ioopm_linked_list_get(keys, 0).i, 0);
        -:  187:
        -:  188:  
        1:  189:  ioopm_linked_list_destroy(keys);
        1:  190:  ioopm_hash_table_destroy(ht);
        1:  191:}
        -:  192:
        1:  193:void test_getkeys3()
        -:  194:{
        1:  195:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  196:
        1:  197:  ioopm_list_t *keys = ioopm_hash_table_keys(ht);
        -:  198:
        1:  199:  ioopm_hash_table_insert(ht, SHEJ, S10);
        1:  200:  ioopm_hash_table_remove(ht, SHEJ);
        -:  201:
        1:  202:  CU_ASSERT_EQUAL(ioopm_linked_list_get(keys, 0).i, 0);
        -:  203:  
        1:  204:  ioopm_linked_list_destroy(keys);
        1:  205:  ioopm_hash_table_destroy(ht);
        1:  206:}
        -:  207:
        1:  208:void test_getvalues1()
        -:  209:{
        -:  210:  
        1:  211:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  212:
        1:  213:  ioopm_hash_table_insert(ht, ONE, S10);
        1:  214:  ioopm_hash_table_insert(ht, TWO, S333);
        -:  215:
        1:  216:  ioopm_list_t *values = ioopm_hash_table_values(ht);
        -:  217:
        1:  218:  CU_ASSERT_EQUAL(ioopm_linked_list_get(values, 0).c, "10");
        1:  219:  CU_ASSERT_EQUAL(ioopm_linked_list_get(values, 1).c, "333");
        -:  220:  
        1:  221:  ioopm_linked_list_destroy(values);
        1:  222:  ioopm_hash_table_destroy(ht);
        -:  223:  
        1:  224:}
        -:  225:
        1:  226:void test_getvalues2()
        -:  227:{
        1:  228:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  229:
        1:  230:  ioopm_list_t *values = ioopm_hash_table_values(ht);
        -:  231:
        1:  232:  CU_ASSERT_EQUAL(ioopm_linked_list_get(values, 0).c, NULL);
        -:  233:  
        1:  234:  ioopm_linked_list_destroy(values);
        1:  235:  ioopm_hash_table_destroy(ht);
        1:  236:}
        -:  237:
        1:  238:void test_getvalues3()
        -:  239:{
        -:  240:  
        1:  241:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  242:
        1:  243:  ioopm_list_t *values = ioopm_hash_table_values(ht);
        -:  244:
        1:  245:  ioopm_hash_table_insert(ht, THREE, S10);
        1:  246:  ioopm_hash_table_remove(ht, THREE);
        -:  247:  
        1:  248:  CU_ASSERT_EQUAL(ioopm_linked_list_get(values, 0).c, NULL);
        -:  249:  
        1:  250:  ioopm_linked_list_destroy(values);
        1:  251:  ioopm_hash_table_destroy(ht);
        -:  252:  
        1:  253:}
        -:  254:
        1:  255:void test_haskey1()
        -:  256:{
        1:  257:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  258:
        1:  259:  ioopm_hash_table_insert(ht, ONE, SHEJ);
        -:  260:  
        1:  261:  CU_ASSERT_TRUE(ioopm_hash_table_has_key(ht, ONE));
        -:  262:  
        1:  263:  ioopm_hash_table_destroy(ht);
        1:  264:}
        -:  265:
        1:  266:void test_haskey2()
        -:  267:{
        1:  268:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  269:  
        1:  270:  CU_ASSERT_FALSE(ioopm_hash_table_has_key(ht, THREE));
        -:  271:  
        1:  272:  ioopm_hash_table_destroy(ht);
        1:  273:}
        -:  274:
        1:  275:void test_hasvalue1()
        -:  276:{
        1:  277:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  278:
        1:  279:  ioopm_hash_table_insert(ht, ONE, S10);
        1:  280:  CU_ASSERT_TRUE(ioopm_hash_table_has_value(ht, S10));
        -:  281:  
        -:  282:  //ioopm_hash_table_insert(ht, (elem_t)5, (elem_t)"59");
        -:  283:  
        -:  284:  //CU_ASSERT_TRUE(ioopm_hash_table_has_value(ht, (elem_t)"59"));
        -:  285:  
        1:  286:  ioopm_hash_table_destroy(ht);
        1:  287:}
        -:  288:
        1:  289:void test_hasvalue2()
        -:  290:{
        1:  291:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  292:  
        1:  293:  CU_ASSERT_FALSE(ioopm_hash_table_has_value(ht, THREE));
        -:  294:  
        1:  295:  ioopm_hash_table_destroy(ht);
        1:  296:}
        -:  297:
        1:  298:void test_hasvalue3()
        -:  299:{
        1:  300:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  301:
        1:  302:  ioopm_hash_table_insert(ht, THREE, S333);
        1:  303:  ioopm_hash_table_remove(ht, THREE);
        -:  304:  
        1:  305:  CU_ASSERT_FALSE(ioopm_hash_table_has_value(ht, S333));
        -:  306:  
        1:  307:  ioopm_hash_table_destroy(ht);
        1:  308:}
        -:  309:
        1:  310:void aux_apply_to_all(elem_t key_ignored, elem_t *value, void *x)
        -:  311:{
        -:  312:  //(*value)[1] = '\0';
        -:  313:
        1:  314:  *value = THREE;
        -:  315:
        1:  316:  return;
        -:  317:}
        -:  318:
        -:  319:
        1:  320:void test_apply_to_all()
        -:  321:{
        1:  322:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  323:  
        -:  324:  /*
        -:  325:  ioopm_hash_table_insert(ht, (elem_t)2, (elem_t)str);
        -:  326:  ioopm_hash_table_insert(ht, (elem_t)30, (elem_t)str2);
        -:  327:
        -:  328:  ioopm_hash_table_apply_to_all(ht, aux_apply_to_all, NULL);
        -:  329:  CU_ASSERT_STRING_EQUAL(ioopm_hash_table_lookup(ht, (elem_t)2).value, "5");
        -:  330:  CU_ASSERT_STRING_EQUAL(ioopm_hash_table_lookup(ht, (elem_t)30).value, "8");
        -:  331:  */
        1:  332:  ioopm_hash_table_insert(ht, ONE, TWO);
        -:  333:
        1:  334:  ioopm_hash_table_apply_to_all(ht, aux_apply_to_all, NULL);
        1:  335:  CU_ASSERT_EQUAL(ioopm_hash_table_lookup(ht, ONE).value.i, 3);
        -:  336:  
        -:  337:  
        1:  338:  ioopm_hash_table_destroy(ht);
        1:  339:}
        -:  340:
    #####:  341:bool aux_all(elem_t key_ignored, elem_t value, void *x)
        -:  342:{
    #####:  343:  elem_t compare = FIFTY;
    #####:  344:  return (value.i == compare.i);
        -:  345:  
        -:  346:}
        -:  347:
        1:  348:void test_all()
        -:  349:{
        1:  350:  ioopm_hash_table_t *ht = ioopm_hash_table_create(NULL);
        -:  351:  
        1:  352:  ioopm_hash_table_insert(ht, ONE, S10);
        1:  353:  ioopm_hash_table_insert(ht, TWO, S10);
        1:  354:  ioopm_hash_table_insert(ht, THREE, S10);
        -:  355:
        -:  356:  
        1:  357:  CU_ASSERT_TRUE(ioopm_hash_table_all(ht, aux_all, NULL));
        -:  358:  
        1:  359:  ioopm_hash_table_destroy(ht);
        1:  360:}
        -:  361:
        1:  362:void test_resize()
        -:  363:{
        1:  364:  ioopm_hash_table_t *ht = ioopm_hash_table_create(key_extract_int);
        -:  365:
       51:  366:  for(int i=10; i<60; ++i)
        -:  367:    {
       50:  368:      elem_t j = {i};
       50:  369:      ioopm_hash_table_insert(ht, j, j);
        -:  370:    }
        -:  371:
        -:  372:  
        1:  373:  CU_ASSERT_EQUAL(ioopm_hash_table_lookup(ht, FIFTY).value.i, 50);
        -:  374:  
        1:  375:    ioopm_hash_table_destroy(ht);
        1:  376:}
        -:  377:
        -:  378:
        -:  379://******************
        -:  380:
        -:  381://      MAIN
        -:  382:
        -:  383://******************
        1:  384:int main()
        -:  385:{
        1:  386:  CU_pSuite pSuiteLookup = NULL;
        1:  387:  CU_pSuite pSuiteInsert = NULL;
        1:  388:  CU_pSuite pSuiteRemove = NULL;
        1:  389:  CU_pSuite pSuiteSize = NULL;
        1:  390:  CU_pSuite pSuiteClear = NULL;
        1:  391:  CU_pSuite pSuiteGetKeys = NULL;
        1:  392:  CU_pSuite pSuiteGetValues = NULL;
        1:  393:  CU_pSuite pSuiteHasKey = NULL;
        1:  394:  CU_pSuite pSuiteHasValue = NULL;
        1:  395:  CU_pSuite pSuiteApplyToAll = NULL;
        1:  396:  CU_pSuite pSuiteAll = NULL;
        1:  397:  CU_pSuite pSuiteResize = NULL;
        -:  398:
        1:  399:  if (CUE_SUCCESS != CU_initialize_registry())
    #####:  400:    return CU_get_error();
        -:  401:
        -:  402:  // LOOKUP SUITE
        1:  403:  pSuiteLookup = CU_add_suite("lookup Suite", init_suite, clean_suite);
        1:  404:  if(NULL == pSuiteLookup)
        -:  405:    {
    #####:  406:      CU_cleanup_registry();
    #####:  407:      return CU_get_error();
        -:  408:    }
        -:  409:
        1:  410:  if(NULL == CU_add_test(pSuiteLookup, "test of lookup()", test_lookup1))
        -:  411:    {
    #####:  412:      CU_cleanup_registry();
    #####:  413:      return CU_get_error();
        -:  414:    }
        -:  415:
        -:  416:  // INSERT SUITE
        1:  417:  pSuiteInsert = CU_add_suite("Insert Suite", init_suite, clean_suite);
        1:  418:  if(NULL == pSuiteInsert)
        -:  419:    {
    #####:  420:      CU_cleanup_registry();
    #####:  421:      return CU_get_error();
        -:  422:    }
        -:  423:
        1:  424:  if(NULL == CU_add_test(pSuiteInsert, "test of insert()", test_insert1))
        -:  425:    {
    #####:  426:      CU_cleanup_registry();
    #####:  427:      return CU_get_error();
        -:  428:    }
        -:  429:
        -:  430:  // REMOVE SUITE
        1:  431:  pSuiteRemove = CU_add_suite("Remove Suite", init_suite, clean_suite);
        1:  432:  if(NULL == pSuiteRemove)
        -:  433:    {
    #####:  434:      CU_cleanup_registry();
    #####:  435:      return CU_get_error();
        -:  436:    }
        -:  437:
        1:  438:  if((NULL == CU_add_test(pSuiteRemove, "test of remove()", test_remove1) || (NULL == CU_add_test(pSuiteRemove, "test of remove()", test_remove2))))
        -:  439:    {
    #####:  440:      CU_cleanup_registry();
    #####:  441:      return CU_get_error();
        -:  442:    }
        -:  443:
        -:  444:  // SIZE SUITE
        -:  445:
        1:  446:  pSuiteSize = CU_add_suite("Size Suite", init_suite, clean_suite);
        1:  447:  if(NULL == pSuiteSize)
        -:  448:    {
    #####:  449:      CU_cleanup_registry();
    #####:  450:      return CU_get_error();
        -:  451:    }
        -:  452:
        1:  453:  if((NULL == CU_add_test(pSuiteSize, "test of size()", test_size1)) || (NULL == CU_add_test(pSuiteSize, "test of size()", test_size2)) || (NULL == CU_add_test(pSuiteSize, "test of size()", test_size3)))
        -:  454:    {
    #####:  455:      CU_cleanup_registry();
    #####:  456:      return CU_get_error();
        -:  457:    }
        -:  458:
        -:  459:  // CLEAR SUITE
        -:  460:
        1:  461:  pSuiteClear = CU_add_suite("Clear Suite", init_suite, clean_suite);
        1:  462:  if(NULL == pSuiteClear)
        -:  463:    {
    #####:  464:      CU_cleanup_registry();
    #####:  465:      return CU_get_error();
        -:  466:    }
        -:  467:
        1:  468:  if((NULL == CU_add_test(pSuiteClear, "test of clear()", test_clear1)) || (NULL == CU_add_test(pSuiteClear, "test of clear()", test_clear2)) || (NULL == CU_add_test(pSuiteClear, "test of clear()", test_clear3)))
        -:  469:    {
    #####:  470:      CU_cleanup_registry();
    #####:  471:      return CU_get_error();
        -:  472:    }
        -:  473:
        -:  474:  // GETKEYS SUITE
        -:  475:
        1:  476:  pSuiteGetKeys = CU_add_suite("GetKeys Suite", init_suite, clean_suite);
        1:  477:  if(NULL == pSuiteGetKeys)
        -:  478:    {
    #####:  479:      CU_cleanup_registry();
    #####:  480:      return CU_get_error();
        -:  481:    }
        -:  482:
        1:  483:  if((NULL == CU_add_test(pSuiteGetKeys, "test of getkeys1()", test_getkeys1)) || (NULL == CU_add_test(pSuiteGetKeys, "test of getkeys2()", test_getkeys2)) || (NULL == CU_add_test(pSuiteGetKeys, "test of getkeys3()", test_getkeys3)))
        -:  484:    {
    #####:  485:      CU_cleanup_registry();
    #####:  486:      return CU_get_error();
        -:  487:    }
        -:  488:
        -:  489:  // GETVALUES SUITE
        -:  490:
        1:  491:  pSuiteGetValues = CU_add_suite("Getvalues Suite", init_suite, clean_suite);
        1:  492:  if(NULL == pSuiteGetValues)
        -:  493:    {
    #####:  494:      CU_cleanup_registry();
    #####:  495:      return CU_get_error();
        -:  496:    }
        -:  497:
        1:  498:  if((NULL == CU_add_test(pSuiteGetValues, "test of getvalues1()", test_getvalues1)) || (NULL == CU_add_test(pSuiteGetValues, "test of getvalues2()", test_getvalues2)) || (NULL == CU_add_test(pSuiteGetValues, "test of getvalues3()", test_getvalues3)))
        -:  499:    {
    #####:  500:      CU_cleanup_registry();
    #####:  501:      return CU_get_error();
        -:  502:    }
        -:  503:
        -:  504:  // HASKEY SUITE
        -:  505:  
        1:  506:  pSuiteHasKey = CU_add_suite("HasKey Suite", init_suite, clean_suite);
        1:  507:  if(NULL == pSuiteHasKey)
        -:  508:    {
    #####:  509:      CU_cleanup_registry();
    #####:  510:      return CU_get_error();
        -:  511:    }
        -:  512:
        1:  513:  if((NULL == CU_add_test(pSuiteHasKey, "test of haskey1()", test_haskey1) || (NULL == CU_add_test(pSuiteHasKey, "test of haskey2()", test_haskey2))))
        -:  514:    {
    #####:  515:      CU_cleanup_registry();
    #####:  516:      return CU_get_error();
        -:  517:    }
        -:  518:  
        -:  519:  // HASVALUE SUITE
        -:  520:
        1:  521:  pSuiteHasValue = CU_add_suite("Hasvalue Suite", init_suite, clean_suite);
        1:  522:  if(NULL == pSuiteHasValue)
        -:  523:    {
    #####:  524:      CU_cleanup_registry();
    #####:  525:      return CU_get_error();
        -:  526:    }
        -:  527:
        1:  528:  if((NULL == CU_add_test(pSuiteHasValue, "test of hasvalue1()", test_hasvalue1) || (NULL == CU_add_test(pSuiteHasValue, "test of hasvalue2()", test_hasvalue2)) || (NULL == CU_add_test(pSuiteHasValue, "test of hasvalue3()", test_hasvalue3))))
        -:  529:    {
    #####:  530:      CU_cleanup_registry();
    #####:  531:      return CU_get_error();
        -:  532:    }
        -:  533:
        -:  534:  // APPLTOALL SUITE
        -:  535:
        1:  536:  pSuiteApplyToAll = CU_add_suite("ApplyToAll Suite", init_suite, clean_suite);
        1:  537:  if(NULL == pSuiteApplyToAll)
        -:  538:    {
    #####:  539:      CU_cleanup_registry();
    #####:  540:      return CU_get_error();
        -:  541:    }
        -:  542:
        1:  543:  if(NULL == CU_add_test(pSuiteApplyToAll, "test of ApplyToAll()", test_apply_to_all))
        -:  544:    {
    #####:  545:      CU_cleanup_registry();
    #####:  546:      return CU_get_error();
        -:  547:    }
        -:  548:
        -:  549:  // APPLTOALL SUITE
        -:  550:
        1:  551:  pSuiteAll = CU_add_suite("All Suite", init_suite, clean_suite);
        1:  552:  if(NULL == pSuiteAll)
        -:  553:    {
    #####:  554:      CU_cleanup_registry();
    #####:  555:      return CU_get_error();
        -:  556:    }
        -:  557:
        1:  558:  if(NULL == CU_add_test(pSuiteAll, "test of All()", test_all))
        -:  559:    {
    #####:  560:      CU_cleanup_registry();
    #####:  561:      return CU_get_error();
        -:  562:    }
        -:  563:
        -:  564:  // RESIZE SUITE
        -:  565:
        1:  566:  pSuiteResize = CU_add_suite("test of Resize", init_suite, clean_suite);
        1:  567:  if(NULL == pSuiteResize)
        -:  568:    {
    #####:  569:      CU_cleanup_registry();
    #####:  570:      return CU_get_error();
        -:  571:    }
        -:  572:
        1:  573:  if(NULL == CU_add_test(pSuiteResize, "test of resize()", test_resize))
        -:  574:    {
    #####:  575:      CU_cleanup_registry();
    #####:  576:      return CU_get_error();
        -:  577:    }
        -:  578:  
        -:  579:  // RUN TESTS
        -:  580:
        1:  581:  CU_basic_set_mode(CU_BRM_VERBOSE);
        1:  582:  CU_basic_run_tests();
        1:  583:  CU_cleanup_registry();
        1:  584:  return CU_get_error();
        -:  585:}
